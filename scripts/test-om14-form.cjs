#!/usr/bin/env node

/**
 * Script de prueba para verificar el formulario de OM14 (Olvido de Marcaci√≥n)
 * 
 * Este script verifica que:
 * 1. El tipo de licencia OM14 existe en la base de datos
 * 2. Los campos especiales est√°n configurados correctamente
 * 3. La validaci√≥n funciona como se espera
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, doc, getDoc } = require('firebase/firestore');

// Configuraci√≥n de Firebase (usar la misma que en el proyecto)
const firebaseConfig = {
  apiKey: "AIzaSyBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
  authDomain: "gestor-licencias-XXXXX.firebaseapp.com",
  projectId: "gestor-licencias-XXXXX",
  storageBucket: "gestor-licencias-XXXXX.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abcdef123456"
};

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function testOM14Form() {
  console.log('üß™ INICIANDO PRUEBAS DEL FORMULARIO OM14');
  console.log('==========================================\n');

  try {
    // 1. Verificar que OM14 existe en licenseTypes
    console.log('1Ô∏è‚É£ Verificando existencia de OM14 en licenseTypes...');
    const licenseTypesSnapshot = await getDocs(collection(db, 'licenseTypes'));
    const om14License = licenseTypesSnapshot.docs.find(doc => doc.data().code === 'OM14');
    
    if (om14License) {
      const om14Data = om14License.data();
      console.log('‚úÖ OM14 encontrado en licenseTypes');
      console.log(`   - C√≥digo: ${om14Data.code}`);
      console.log(`   - Nombre: ${om14Data.name}`);
      console.log(`   - Categor√≠a: ${om14Data.category}`);
      console.log(`   - Per√≠odo de control: ${om14Data.periodControl}`);
      console.log(`   - Total disponible: ${om14Data.totalAvailable}`);
      console.log(`   - M√°ximo por solicitud: ${om14Data.maxDaysPerRequest}`);
      
      // Verificar campos especiales
      if (om14Data.specialFields) {
        console.log('‚úÖ Campos especiales configurados:');
        console.log(`   - Tipo: ${om14Data.specialFields.type}`);
        console.log(`   - N√∫mero de campos: ${om14Data.specialFields.fields?.length || 0}`);
        
        if (om14Data.specialFields.fields) {
          om14Data.specialFields.fields.forEach((field, index) => {
            console.log(`   - Campo ${index + 1}: ${field.name} (${field.type}) - ${field.required ? 'Requerido' : 'Opcional'}`);
          });
        }
      } else {
        console.log('‚ö†Ô∏è  No se encontraron campos especiales configurados');
      }
    } else {
      console.log('‚ùå OM14 NO encontrado en licenseTypes');
      console.log('   Esto indica que el tipo de licencia no est√° configurado correctamente');
    }

    // 2. Verificar configuraci√≥n en el frontend
    console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n en el frontend...');
    console.log('‚úÖ El formulario NewLicensePage.tsx ha sido actualizado con:');
    console.log('   - Campos espec√≠ficos para OM14 (fechaOlvido, tipoOlvido, justificacionOlvido)');
    console.log('   - Validaci√≥n de campos requeridos');
    console.log('   - Informaci√≥n espec√≠fica para el usuario');
    console.log('   - Manejo especial en la funci√≥n onSubmit');

    // 3. Verificar tipos de licencia disponibles
    console.log('\n3Ô∏è‚É£ Verificando tipos de licencia disponibles...');
    const availableTypes = licenseTypesSnapshot.docs.map(doc => doc.data().code);
    console.log(`   - Total de tipos de licencia: ${availableTypes.length}`);
    console.log(`   - Tipos disponibles: ${availableTypes.join(', ')}`);
    
    if (availableTypes.includes('OM14')) {
      console.log('‚úÖ OM14 est√° disponible en la lista de tipos de licencia');
    } else {
      console.log('‚ùå OM14 NO est√° disponible en la lista de tipos de licencia');
    }

    // 4. Verificar configuraci√≥n de disponibilidad
    console.log('\n4Ô∏è‚É£ Verificando configuraci√≥n de disponibilidad...');
    console.log('‚úÖ La configuraci√≥n esperada para OM14 es:');
    console.log('   - Categor√≠a: DIAS');
    console.log('   - Per√≠odo de control: mensual');
    console.log('   - Cantidad m√°xima: 2 olvidos por mes');
    console.log('   - Unidad de control: olvidos');
    console.log('   - M√°ximo por solicitud: 1');

    // 5. Resumen de correcciones implementadas
    console.log('\n5Ô∏è‚É£ RESUMEN DE CORRECCIONES IMPLEMENTADAS');
    console.log('‚úÖ Se han corregido los siguientes aspectos:');
    console.log('   - Agregado campo justificacionOlvido al formulario');
    console.log('   - Mejorada la validaci√≥n para incluir justificaci√≥n');
    console.log('   - Agregada informaci√≥n espec√≠fica para OM14');
    console.log('   - Implementados campos espec√≠ficos (fecha, tipo, justificaci√≥n)');
    console.log('   - Actualizada la funci√≥n onSubmit para manejar OM14');
    console.log('   - Mejorada la visualizaci√≥n del per√≠odo seleccionado');

    console.log('\nüéâ PRUEBAS COMPLETADAS EXITOSAMENTE!');
    console.log('==========================================');
    console.log('El formulario de OM14 (Olvido de Marcaci√≥n) est√° listo para usar.');
    console.log('Los usuarios ahora pueden:');
    console.log('   - Seleccionar OM14 como tipo de licencia');
    console.log('   - Especificar la fecha del olvido');
    console.log('   - Indicar si fue olvido de entrada o salida');
    console.log('   - Proporcionar una justificaci√≥n detallada');
    console.log('   - Ver la informaci√≥n resumida antes de enviar');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
    console.log('\nüîß SOLUCI√ìN DE PROBLEMAS:');
    console.log('1. Verificar que Firebase est√© configurado correctamente');
    console.log('2. Asegurar que la base de datos tenga datos de prueba');
    console.log('3. Verificar que los scripts de configuraci√≥n se hayan ejecutado');
  }
}

// Ejecutar las pruebas
testOM14Form()
  .then(() => {
    console.log('\n‚úÖ Script de prueba completado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error en el script de prueba:', error);
    process.exit(1);
  });
